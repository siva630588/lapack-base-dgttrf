{
  "version": 3,
  "sources": ["../lib/base.js", "../lib/dgttrf.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math-base-special-abs' );\n\n\n// MAIN //\n\n/**\n* Computes an `LU` factorization of a real tridiagonal matrix `A` using elimination with partial pivoting and row interchanges.\n*\n* ## Notes\n*\n* -   `DL` should have `N-1` indexed elements and is overwritten by the multipliers that define the matrix `L` from the `LU` factorization of `A`.\n* -   `D` should have `N` indexed elements and is overwritten by the diagonal elements of the upper triangular matrix `U` from the `LU` factorization of `A`.\n* -   `DU` should have `N-1` indexed elements and is overwritten by the elements of the first super-diagonal of `U`.\n* -   `DU2` should have `N-2` indexed elements and is overwritten by the elements of the second super-diagonal of `U`.\n* -   For `0 <= i < n`, row `i` of the matrix is interchanged with row `IPIV(i)`. `IPIV(i)` will always be either `i` or `i+1`. `IPIV(i) = i` indicates a row interchange was not required.\n*\n* @private\n* @param {NonNegativeInteger} N - number of rows/columns in `A`\n* @param {Float64Array} DL - the first sub diagonal of `A`\n* @param {integer} strideDL - stride length for `DL`\n* @param {NonNegativeInteger} offsetDL - starting index of `DL`\n* @param {Float64Array} D - the diagonal of `A`\n* @param {integer} strideD - stride length for `D`\n* @param {NonNegativeInteger} offsetD - starting index of `D`\n* @param {Float64Array} DU - the first super-diagonal of `A`\n* @param {integer} strideDU - stride length for `DU`\n* @param {NonNegativeInteger} offsetDU - starting index of `DU`\n* @param {Float64Array} DU2 - the second super-diagonal of `U`\n* @param {integer} strideDU2 - stride length for `DU2`\n* @param {NonNegativeInteger} offsetDU2 - starting index of `DU2`\n* @param {Int32Array} IPIV - vector of pivot indices\n* @param {integer} strideIPIV - stride length for `IPIV`\n* @param {NonNegativeInteger} offsetIPIV - starting index of `IPIV`\n* @returns {integer} status code\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var Int32Array = require( '@stdlib/array-int32' )\n*\n* var DL = new Float64Array( [ 1.0, 1.0 ] );\n* var D = new Float64Array( [ 2.0, 3.0, 1.0 ] );\n* var DU = new Float64Array( [ 1.0, 1.0 ] );\n* var DU2 = new Float64Array( [ 0.0 ] );\n* var IPIV = new Int32Array( [ 0, 0, 0 ] );\n*\n* dgttrf( 3, DL, 1, 0, D, 1, 0, DU, 1, 0, DU2, 1, 0, IPIV, 1, 0 );\n* // DL => <Float64Array>[ 0.5, 0.4 ]\n* // D => <Float64Array>[ 2.0, 2.5, 0.6 ]\n* // DU => <Float64Array>[ 1.0, 1.0 ]\n* // DU2 => <Float64Array>[ 0.0 ]\n* // IPIV => <Int32Array>[ 0, 1, 2 ]\n*/\nfunction dgttrf( N, DL, strideDL, offsetDL, D, strideD, offsetD, DU, strideDU, offsetDU, DU2, strideDU2, offsetDU2, IPIV, strideIPIV, offsetIPIV ) { // eslint-disable-line stdlib/jsdoc-doctest-decimal-point, max-len, max-params\n\tvar fact;\n\tvar temp;\n\tvar idu2;\n\tvar idu;\n\tvar idl;\n\tvar id;\n\tvar ip;\n\tvar i;\n\tvar j;\n\n\tif ( N === 0 ) {\n\t\treturn 0;\n\t}\n\tidu2 = offsetDU2;\n\tip = offsetIPIV;\n\n\t// Initialize values in IPIV and DU2...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tIPIV[ ip ] = i;\n\t\tif ( i < N-2 ) {\n\t\t\tDU2[ idu2 ] = 0;\n\t\t}\n\t\tip += strideIPIV;\n\t\tidu2 += strideDU2;\n\t}\n\t// Initialize pointers to the first indexed elements:\n\tidu2 = offsetDU2;\n\tip = offsetIPIV;\n\tidl = offsetDL;\n\tid = offsetD;\n\tidu = offsetDU;\n\n\tfor ( i = 0; i < N-2; i++ ) {\n\t\t// Check whether row interchange is required, and, if not, eliminate the i-th element of DL...\n\t\tif ( abs( D[ id ] ) >= abs( DL[ idl ] ) ) {\n\t\t\tif ( D[ id ] !== 0.0 ) {\n\t\t\t\tfact = DL[ idl ] / D[ id ];\n\t\t\t\tDL[ idl ] = fact;\n\t\t\t\tD[ id+strideD ] = D[ id+strideD ] - ( fact*DU[ idu ] );\n\t\t\t}\n\t\t}\n\t\t// Otherwise, interchange the ith and (i+1)th rows and eliminate i-th element of DL...\n\t\telse {\n\t\t\tfact = D[ id ] / DL[ idl ];\n\t\t\tD[ id ] = DL[ idl ];\n\t\t\tDL[ idl ] = fact;\n\t\t\ttemp = DU[ idu ];\n\n\t\t\tj = id + strideD;\n\t\t\tDU[ idu ] = D[ j ];\n\t\t\tD[ j ] = temp - ( fact*D[ j ] );\n\n\t\t\tj = idu + strideDU;\n\t\t\tDU2[ idu2 ] = DU[ j ];\n\t\t\tDU[ j ] = -fact*DU[ j ];\n\n\t\t\tIPIV[ ip ] = i + 1;\n\t\t}\n\t\tid += strideD;\n\t\tidl += strideDL;\n\t\tidu += strideDU;\n\t\tidu2 += strideDU2;\n\t\tip += strideIPIV;\n\t}\n\t// Perform the final (N-2)th iteration separately for the last two rows...\n\tif ( N > 1 ) {\n\t\ti = N - 2;\n\t\tif ( abs( D[ id ] ) >= abs( DL[ idl ] ) ) {\n\t\t\tif ( D[ id ] !== 0 ) {\n\t\t\t\tfact = DL[ idl ] / D[ id ];\n\t\t\t\tDL[ idl ] = fact;\n\t\t\t\tD[ id+strideD ] = D[ id+strideD ] - ( fact*DU[ idu ] );\n\t\t\t}\n\t\t} else {\n\t\t\tfact = D[ id ] / DL[ idl ];\n\t\t\tD[ id ] = DL[ idl ];\n\t\t\tDL[ idl ] = fact;\n\t\t\ttemp = DU[ idu ];\n\n\t\t\tj = id + strideD;\n\t\t\tDU[ idu ] = D[ j ];\n\t\t\tD[ j ] = temp - ( fact*D[ j ] );\n\n\t\t\tIPIV[ ip ] = i + 1;\n\t\t}\n\t}\n\tid = offsetD;\n\n\t// Check whether U is singular...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( D[ id ] === 0.0 ) {\n\t\t\treturn i;\n\t\t}\n\t\tid += strideD;\n\t}\n\treturn 0;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dgttrf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar format = require( '@stdlib/string-format' );\nvar base = require( './base.js' );\n\n\n// MAIN //\n\n/**\n* Computes an `LU` factorization of a real tridiagonal matrix `A` using elimination with partial pivoting and row interchanges.\n*\n* ## Notes\n*\n* -   `DL` should have `N-1` elements and is overwritten by the multipliers that define the matrix `L` from the `LU` factorization of `A`.\n* -   `D` is overwritten by the diagonal elements of the upper triangular matrix `U` from the `LU` factorization of `A`.\n* -   `DU` should have `N-1` elements and is overwritten by the elements of the first super-diagonal of `U`.\n* -   `DU2` should have `N-2` elements and is overwritten by the elements of the second super-diagonal of `U`.\n* -   For `0 <= i < n`, row `i` of the matrix is interchanged with row `IPIV(i)`. `IPIV(i)` will always be either `i` or `i+1`. `IPIV(i) = i` indicates a row interchange was not required.\n*\n* @param {NonNegativeInteger} N - number of rows/columns in `A`\n* @param {Float64Array} DL - the first sub diagonal of `A`\n* @param {Float64Array} D - the diagonal of `A`, expects N indexed elements\n* @param {Float64Array} DU - the first super-diagonal of `A`\n* @param {Float64Array} DU2 - the second super-diagonal of `U`\n* @param {Int32Array} IPIV - vector of pivot indices\n* @throws {RangeError} first argument must be a nonnegative integer\n* @returns {integer} status code\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var Int32Array = require( '@stdlib/array-int32' );\n*\n* var DL = new Float64Array( [ 1.0, 1.0 ] );\n* var D = new Float64Array( [ 2.0, 3.0, 1.0 ] );\n* var DU = new Float64Array( [ 1.0, 1.0 ] );\n* var DU2 = new Float64Array( [ 0.0 ] );\n* var IPIV = new Int32Array( [ 0, 0, 0 ] );\n*\n* dgttrf( 3, DL, D, DU, DU2, IPIV );\n* // DL => <Float64Array>[ 0.5, 0.4 ]\n* // D => <Float64Array>[ 2.0, 2.5, 0.6 ]\n* // DU => <Float64Array>[ 1.0, 1.0 ]\n* // DU2 => <Float64Array>[ 0.0 ]\n* // IPIV => <Int32Array>[ 0, 1, 2 ]\n*/\nfunction dgttrf( N, DL, D, DU, DU2, IPIV ) { // eslint-disable-line stdlib/jsdoc-doctest-decimal-point\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\treturn base( N, DL, 1, 0, D, 1, 0, DU, 1, 0, DU2, 1, 0, IPIV, 1, 0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dgttrf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar format = require( '@stdlib/string-format' );\nvar base = require( './base.js' );\n\n\n// MAIN //\n\n/**\n* Computes an `LU` factorization of a real tridiagonal matrix `A` using elimination with partial pivoting and row interchanges and alternative indexing semantics.\n*\n* ## Notes\n*\n* -   `DL` should have `N-1` indexed elements and is overwritten by the multipliers that define the matrix `L` from the `LU` factorization of `A`.\n* -   `D` should have `N` indexed elements and is overwritten by the diagonal elements of the upper triangular matrix `U` from the `LU` factorization of `A`.\n* -   `DU` should have `N-1` indexed elements and is overwritten by the elements of the first super-diagonal of `U`.\n* -   `DU2` should have `N-2` indexed elements and is overwritten by the elements of the second super-diagonal of `U`.\n* -   For `0 <= i < n`, row `i` of the matrix is interchanged with row `IPIV(i)`. `IPIV(i)` will always be either `i` or `i+1`. `IPIV(i) = i` indicates a row interchange was not required.\n*\n* @param {NonNegativeInteger} N - number of rows/columns in `A`\n* @param {Float64Array} DL - the first sub diagonal of `A`\n* @param {integer} strideDL - stride length for `DL`\n* @param {NonNegativeInteger} offsetDL - starting index of `DL`\n* @param {Float64Array} D - the diagonal of `A`\n* @param {integer} strideD - stride length for `D`\n* @param {NonNegativeInteger} offsetD - starting index of `D`\n* @param {Float64Array} DU - the first super-diagonal of `A`\n* @param {integer} strideDU - stride length for `DU`\n* @param {NonNegativeInteger} offsetDU - starting index of `DU`\n* @param {Float64Array} DU2 - the second super-diagonal of `U`\n* @param {integer} strideDU2 - stride length for `DU2`\n* @param {NonNegativeInteger} offsetDU2 - starting index of `DU2`\n* @param {Int32Array} IPIV - vector of pivot indices\n* @param {integer} strideIPIV - stride length for `IPIV`\n* @param {NonNegativeInteger} offsetIPIV - starting index of `IPIV`\n* @throws {RangeError} first argument must be a nonnegative integer\n* @returns {integer} status code\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var DL = new Float64Array( [ 1.0, 1.0 ] );\n* var D = new Float64Array( [ 2.0, 3.0, 1.0 ] );\n* var DU = new Float64Array( [ 1.0, 1.0 ] );\n* var DU2 = new Float64Array( [ 0.0 ] );\n* var IPIV = new Int32Array( [ 0, 0, 0 ] );\n*\n* dgttrf( 3, DL, 1, 0, D, 1, 0, DU, 1, 0, DU2, 1, 0, IPIV, 1, 0 );\n* // DL => <Float64Array>[ 0.5, 0.4 ]\n* // D => <Float64Array>[ 2.0, 2.5, 0.6 ]\n* // DU => <Float64Array>[ 1.0, 1.0 ]\n* // DU2 => <Float64Array>[ 0.0 ]\n* // IPIV => <Int32Array>[ 0, 1, 2 ]\n*/\nfunction dgttrf( N, DL, strideDL, offsetDL, D, strideD, offsetD, DU, strideDU, offsetDU, DU2, strideDU2, offsetDU2, IPIV, strideIPIV, offsetIPIV ) { // eslint-disable-line stdlib/jsdoc-doctest-decimal-point, max-len, max-params\n\tif ( N < 0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%d`.', N ) );\n\t}\n\treturn base( N, DL, strideDL, offsetDL, D, strideD, offsetD, DU, strideDU, offsetDU, DU2, strideDU2, offsetDU2, IPIV, strideIPIV, offsetIPIV ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = dgttrf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar dgttrf = require( './dgttrf.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dgttrf, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dgttrf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* LAPACK routine to compute an `LU` factorization of a real tridiagonal matrix `A` using elimination with partial pivoting and row interchanges.\n*\n* @module @stdlib/lapack-base-dgttrf\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var Int32Array = require( '@stdlib/array-int32' );\n* var dgttrf = require( '@stdlib/lapack-base-dgttrf' );\n*\n* var DL = new Float64Array( [ 1.0, 1.0 ] );\n* var D = new Float64Array( [ 2.0, 3.0, 1.0 ] );\n* var DU = new Float64Array( [ 1.0, 1.0 ] );\n* var DU2 = new Float64Array( [ 0.0 ] );\n* var IPIV = new Int32Array( [ 0, 0, 0 ] );\n*\n* dgttrf( 3, DL, D, DU, DU2, IPIV );\n* // DL => <Float64Array>[ 0.5, 0.4 ]\n* // D => <Float64Array>[ 2.0, 2.5, 0.6 ]\n* // DU => <Float64Array>[ 1.0, 1.0 ]\n* // DU2 => <Float64Array>[ 0.0 ]\n* // IPIV => <Int32Array>[ 0, 1, 2 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var Int32Array = require( '@stdlib/array-int32' );\n* var dgttrf = require( '@stdlib/lapack-base-dgttrf' );\n*\n* var DL = new Float64Array( [ 1.0, 1.0 ] );\n* var D = new Float64Array( [ 2.0, 3.0, 1.0 ] );\n* var DU = new Float64Array( [ 1.0, 1.0 ] );\n* var DU2 = new Float64Array( [ 0.0 ] );\n* var IPIV = new Int32Array( [ 0, 0, 0 ] );\n*\n* dgttrf.ndarray( 3, DL, 1, 0, D, 1, 0, DU, 1, 0, DU2, 1, 0, IPIV, 1, 0 );\n* // DL => <Float64Array>[ 0.5, 0.4 ]\n* // D => <Float64Array>[ 2.0, 2.5, 0.6 ]\n* // DU => <Float64Array>[ 1.0, 1.0 ]\n* // DU2 => <Float64Array>[ 0.0 ]\n* // IPIV => <Int32Array>[ 0, 1, 2 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar dgttrf;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdgttrf = main;\n} else {\n\tdgttrf = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dgttrf;\n"],
  "mappings": "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",
  "names": ["require_base", "__commonJSMin", "exports", "module", "abs", "dgttrf", "N", "DL", "strideDL", "offsetDL", "D", "strideD", "offsetD", "DU", "strideDU", "offsetDU", "DU2", "strideDU2", "offsetDU2", "IPIV", "strideIPIV", "offsetIPIV", "fact", "temp", "idu2", "idu", "idl", "id", "ip", "i", "j", "require_dgttrf", "__commonJSMin", "exports", "module", "format", "base", "dgttrf", "N", "DL", "D", "DU", "DU2", "IPIV", "require_ndarray", "__commonJSMin", "exports", "module", "format", "base", "dgttrf", "N", "DL", "strideDL", "offsetDL", "D", "strideD", "offsetD", "DU", "strideDU", "offsetDU", "DU2", "strideDU2", "offsetDU2", "IPIV", "strideIPIV", "offsetIPIV", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "dgttrf", "ndarray", "join", "tryRequire", "isError", "main", "dgttrf", "tmp"]
}
